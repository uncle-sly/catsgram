# описания сервисов (контейнеров), которые должны быть развёрнуты
services:
  # описание контейнера db
  db: # имя сервиса
    # образ, из которого должен быть запущен контейнер
    image: postgres:16.1
    # имя, которое нужно присвоить контейнеру
    container_name: postgres
    # публикуемые порты
    ports:
      - "5435:5432"
    # настройки монтирования volume
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data/
    # переменные окружения
    environment:
      - POSTGRES_DB=filmsdb
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    # описание способа проверки, что контейнер в рабочем состоянии
    healthcheck:
      # указываем, какую команду выполнить внутри контейнера для проверки его статуса
      # в этом примере вызывается утилита pg_isready, входящая в состав PostgreSQL
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      # через какое время после запуска начинать проверку
      timeout: 5s
      # интервал повторов проверки
      interval: 5s
      # количество попыток
      retries: 10

    # ещё один сервис
  db-init:
    image: postgres:16.1
    container_name: db-init
    # секция для указания зависимостей от других сервисов
    depends_on:
      # указываем, что этот сервис зависит от сервиса с именем db
      db:
        # указываем, что условием запуска будет момент, когда
        # сервис db будет в «здоровом» состоянии
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://dbuser:12345@db:5435/filmsdb -v ON_ERROR_STOP=1 <<-EOSQL
          CREATE TABLE IF NOT EXISTS films (
              id INTEGER GENERATED BY DEFAULT AS IDENTITY,
              title varchar(40) NOT NULL,
              produced integer NOT NULL,
              date_prod date,
              kind varchar(10),
              len_min integer,
              CONSTRAINT films_pk PRIMARY KEY (id),
              CONSTRAINT constr_example CHECK (len_min > 100 AND title <> '')
          );
          INSERT INTO films (title, produced, date_prod, kind, len_min)
          VALUES 
              ('Movie 1', 2016, '2016-07-20', 'Sci-Fi', 110),
              ('Movie 2', 2017, '2017-03-10', 'Thriller', 130),
              ('Movie 3', 2021, '2021-11-05', 'Mystery', 115);
        EOSQL 

